#!/usr/local/bin/ruby -w
# -*- Ruby -*-
# $Id$

## Overview
# <http://nais.to/~yto/tools/file2date/> を Exif 対応で書き直したもの。
# ファイル名については、ISO8601 な感じにした。
# Ex: dcp_0003.jpg --> 2001-06-23T20:05:32.jpg
# Ex: /home/yto/e-01.txt --> 2001-06-12T14:32:10.txt

## Requirements:
# libexif: <http://libexif.sourceforge.net/>
# Ruby: <http://www.ruby-lang.org/>
# ruby-libexif パッケージ: <http://tam.0xfa.com/ruby-libexif/>

## ToDo:
# 同一の時刻（秒単位）のファイルが既にある場合をどうするかは検討中…。

require 'ftools'
require 'exif'
require 'yaml'

def usage
  print "Usage: #{$0} file [file ...]\n"
  exit 1
end

# Exif にある日付情報を Time オブジェクトにして返す。
def exif2time (exif_datetime)
  ary = exif_datetime.split(/\D+/)
  return Time.local(ary[0], ary[1], ary[2], ary[3], ary[4], ary[5])
end

def main
  usage if ARGV.length == 0
  while orig_fname = ARGV.shift
    begin
      exif = Exif.new(orig_fname)
      datetime = exif2time exif['DateTime']
    rescue Exif::Error => e
      print "(Skip: Exif error):\t#{orig_fname}\n"
      next
    rescue ArgumentError => e
      print "(Skip: #{orig_fname} doesn't have a valid date)\n"
      next
    end

    new_fname = datetime.strftime("%Y-%m-%dT%H:%M:%S.jpg")
    if FileTest.exist?(new_fname) then
      unless File.cmp(orig_fname, new_fname) then
	print "(Skip: #{new_fname} already exist):\t#{orig_fname}\n"
      end
      next
    end
    File.copy(orig_fname, new_fname)
    stat = File.stat(orig_fname)
    File.utime(stat.atime, stat.mtime, new_fname)
    puts new_fname

    yaml = YAML::Store.new("metadata.yaml", :SortKeys => true)
    yaml.transaction do
      yaml[new_fname] = { "datetime" => datetime }
    end
  end
end
main
