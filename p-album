#!/usr/local/bin/ruby
# -*- Ruby -*-
# $Id$

require 'date'
require 'image_size'
require 'yaml'

# index.htmlで、最近 N 日分を表示するか
RECENT = 5

# サムネールを置くディレクトリ
THUMBS_DIR = "thumbs"

# HTMLの雛型のあるディレクトリ
TEMPLATE_DIR = 'templates'

# サムネール生成時の convert コマンドのオプション
CONVERT_OPT = "-geometry '96x96>'"

# 月名
MONTHNAMES = [nil] + %w(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec)

# オプション指定
Opt = {
  'force_thumbs' => false	# サムネールを再生成する
}

def usage
  print "  Usage: $0 [option]\n"
  exit
end

def thumbname(fname)
  return "#{THUMBS_DIR}/#{fname}"
end

def htmlname (fname)
  base = File.basename(fname, ".jpg")
  return "./#{base}.html"
end

def find_photos
  files = YAML.load(File.open "metadata.yaml").keys.select {|f|
    f =~ /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.jpg$/
  }
  return files.sort
end

def make_thumbnail (fname)
  thumb = thumbname(fname)
  system("convert #{CONVERT_OPT} #{fname} #{thumb}") || raise("convert fails")
end

def html_imgsize (fname)
  img = ImageSize.new( File.open(fname) )
  width = img.get_width
  height = img.get_height
  return "width=\"#{width}\" height=\"#{height}\""
end

def expand_template (fname, param)
  template = File.open(fname).read
  result = template.gsub(/\$(\w+)/) {|s|
    param[$1] if param.has_key?($1)
  }
  return result
end

def make_htmlpages(files)
  metadata = YAML.load( File.open("metadata.yaml") )
  files.each_index {|i|
    puts files[i]
    fileinfo = metadata[files[i]]
    if fileinfo.has_key?("convert")
      unless FileTest.exist?(files[i] + ".orig")
	File.mv(files[i], files[i] + ".orig")
      end
      unless FileTest.exist?(files[i])
	system("convert #{fileinfo["convert"]} #{files[i]}.orig #{files[i]}") || raise("convert fails")
      end
    end

    if FileTest.exist?(thumbname(files[i])) == false || File.mtime(thumbname(files[i])) < File.mtime(files[i])
      make_thumbnail(files[i])
    end

    datetime = fileinfo['datetime']
    fileinfo['datetime'] = datetime.strftime("%Y-%m-%d %H:%M")
    fileinfo['date'] = datetime.strftime("%Y-%m-%d")
    fileinfo['monthlyindex'] = datetime.strftime("%Y-%m.html")
    fileinfo['image'] = "./#{files[i]}"
    fileinfo['imagesize'] = html_imgsize(files[i])
    if i == 0 then
      fileinfo['prev'] = "前の写真"
    else
      html = htmlname(files[i-1])
      fileinfo['prev'] = "<a href=\"#{html}\">前の写真</a>"
    end
    if i == files.size-1 then
      fileinfo['next'] = "次の写真"
    else
      html = htmlname(files[i+1])
      fileinfo['next'] = "<a href=\"#{html}\">次の写真</a>"
    end

    template = expand_template("#{TEMPLATE_DIR}/htmlpage.html", fileinfo)
    html = File.open(htmlname(files[i]), "w")
    html.print template
  }
end

def make_monthlypage (files)
  daybody = Hash.new("")
  monthbody = Hash.new(0)
  metadata = YAML.load( File.open("metadata.yaml") )
  files.each{|fname|
    datetime = metadata[fname]["datetime"]
    html = htmlname(fname)
    thumb = thumbname(fname)
    size = html_imgsize(thumb)
    if metadata[fname].has_key?("title") then
      title = metadata[fname]["title"]
    else
      title = datetime.strftime "（撮影日時 %Y-%m-%d %H:%M）"
    end

    day = datetime.strftime "%Y-%m-%d"
    month = datetime.strftime "%Y-%m"
    daybody[day] += "<a href=\"#{html}\"><img src=\"#{thumb}\" #{size} alt=\"#{title}\"></a>\n"
    monthbody[month] += 1
  }

  month = monthbody.keys.sort
  month.each_index{|i|
    days = daybody.keys.sort.select {|e|
      e =~ /^#{month[i]}/
    }

    param = Hash.new
    param['total'] = monthbody[month[i]]
    param['body'] = "<div class=\"monthbody\">\n"
    days.each {|day|
      param['body'] += "<div class=\"day-header\"><a name=\"#{day}\">#{day}</a></div>\n"
      param['body'] += "<div class=\"day-body\">#{daybody[day]}</div>\n"
    }
    param['body'] += "</div>"
    param['month'] = month[i]
    if i == 0 then
      param['prev'] = "前月"
    else
      param['prev'] = "<a href=\"#{month[i-1]}.html\">前月</a>"
    end
    if i == month.size-1 then
      param['next'] = "翌月"
    else
      param['next'] = "<a href=\"#{month[i+1]}.html\">翌月</a>"
    end

    template = expand_template("#{TEMPLATE_DIR}/monthlypage.html", param)
    html = File.open("#{month[i]}.html", "w")
    html.print template
  }

  # index.html に最新のものを書き出す。
  param = Hash.new("")
  param['recent'] = RECENT
  days = daybody.keys.sort.reverse
  days[0 .. RECENT].each{|day|
    param['body'] += "<div class=\"day-header\">#{day}</div>\n"
    param['body'] += "<div class=\"day-body\">#{daybody[day]}</div>\n"
  }
  param['monthly_list'] = get_monthly_list(monthbody)

  template = expand_template("#{TEMPLATE_DIR}/indexpage.html", param)
  html = File.open("index.html", "w")
  html.print template
end

def get_monthly_list (monthbody)
  result = ""
  prev_year = 0
  monthbody.keys.sort.each {|m|
    year, month = m[0..3], m[5..6]
    if year != prev_year then
      # year changed!
      result += "<br>\n" if prev_year != 0
      result += "#{year} : \n"
      prev_year = year
    end
    result += "<a href=\"#{m}.html\">#{MONTHNAMES[month.to_i]}</a>\n"
  }
  return result
end

def main
  while ARGV[0] =~ /^-/
    optstr = ARGV.shift
    Opt['force_thumbs'] = true if optstr == "-f"
  end
  files = find_photos()
  make_htmlpages(files)
  make_monthlypage(files)
end

main()
