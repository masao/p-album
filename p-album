#!/usr/local/bin/perl -w
# -*- CPerl -*-
# $Id$

use strict;
use IO::File;
use Image::Size qw(html_imgsize);

# index.htmlで、最近 N 日分を表示するか
my $RECENT = 5;

# 月の名称
my @MONTHNAME = (0,
		 "Jan", "Feb", "Mar", "Apr", "May", "Jun",
		 "Jul", "Aug", "Sep", "Oct", "Nov", "Dec");

# サムネールを置くディレクトリ
my $THUMBS_DIR = "thumbs";

# HTMLの雛型のあるディレクトリ
my $TEMPLATE_DIR = '/home/masao/CVSwork/p-album/templates';

# convert コマンドのオプション
my @CONVERT_OPT = ('-geometry', '15%');

main();
sub main {
    my @files = find_photos();
    my $i = 0;
    make_htmlpages(@files);
    make_monthlypage(@files);
}

sub usage() {
    print "  Usage: $0 dir\n";
    exit;
}

sub find_photos() {
    opendir(DIR, ".") || die "opendir: .: $!";
    my @files = sort grep(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.jpg$/,
		       readdir(DIR));
    closedir(DIR) || die "closedir: $!";
    return @files;
}

sub make_thumbnail($) {
    my ($fname) = @_;
    my $thumb = thumbname($fname);
    my @cmd = ("convert", @CONVERT_OPT, $fname, $thumb);
    system(@cmd) == 0
	|| die "system fail: \"@cmd\": $!";
}

sub make_htmlpages(@) {
    my (@files) = @_;

    for (my $i = 0; $i < @files; $i++) {
	print "$files[$i]\n";
	make_thumbnail($files[$i]) if not -e thumbname($files[$i]);

	my %param = ();
	my ($year, $month, $day, $hour, $min, $sec) = split(/\D+/, $files[$i]);
	$param{'date'} = "$year-$month-$day";
	$param{'time'} = "$hour:$min:$sec";
	$param{'monthlyindex'} = "$year-$month.html";
	$param{'image'} = "./$files[$i]";
	$param{'imagesize'} = html_imgsize($files[$i]);
	if ($i == 0) {
	    $param{'prev'} = "前の写真";
	} else {
	    my $html = htmlname($files[$i-1]);
	    $param{'prev'} = "<a href=\"$html\">前の写真</a>";
	}
	if ($i == $#files) {
	    $param{'next'} = "次の写真";
	} else {
	    my $html = htmlname($files[$i+1]);
	    $param{'next'} = "<a href=\"$html\">次の写真</a>";
	}

	my $template = readfile("$TEMPLATE_DIR/htmlpage.html");
	$template =~ s/\$(\w+)/defined($param{$1})? $param{$1} : ""/ge;

	my $html = htmlname($files[$i]);
	my $fh = fopen(">$html");
	print $fh $template;
    }
}

sub make_monthlypage(@) {
    my (@files) = @_;

    my %daybody = ();
    my %monthbody = ();
    foreach my $fname (@files) {
	my ($year, $month, $day, $time) = get_datetime($fname);
	my $html = htmlname($fname);
	my $thumb = thumbname($fname);
	my $size = html_imgsize($thumb);
	$daybody{"$year-$month-$day"} .= "<a href=\"$html\"><img src=\"$thumb\" alt=\"\" $size></a>\n";
	$monthbody{"$year-$month"} = 1;
    }
    my @month = sort keys %monthbody;
    for (my $i = 0; $i < @month; $i++) {
	my @days = sort grep /^$month[$i]/, keys %daybody;
	my %param = ();
	$param{'body'} = "<div class=\"monthbody\">\n";
	foreach my $day (@days) {
	    $param{'body'} .= "<div class=\"day-header\"><a name=\"$day\">$day</a></div>\n";
	    $param{'body'} .= "<div class=\"day-body\">$daybody{$day}</div>\n";
	}
	$param{'body'} .= "</div>";
	$param{'month'} = $month[$i];
	if ($i > 0) {
	    $param{'prev'} = "<a href=\"$month[$i-1].html\">前月</a>";
	} else {
	    $param{'prev'} = "前月";
	}
	if ($i < $#month) {
	    $param{'next'} = "<a href=\"$month[$i+1].html\">翌月</a>";
	} else {
	    $param{'next'} = "翌月";
	}

	my $template = readfile("$TEMPLATE_DIR/monthlypage.html");
	$template =~ s/\$(\w+)/defined($param{$1})? $param{$1} : ""/ge;
	my $fh = fopen(">$month[$i].html");
	print $fh $template;
    }

    # index.html に最新のものを書き出す。
    my %param = ();
    $param{'recent'} = $RECENT;
    my @days = sort { $b cmp $a } keys %daybody;
    for (my $i = 0; $i < @days && $i < $RECENT; $i++) {
	$param{'body'} .= "<div class=\"day-header\">$days[$i]</div>\n";
	$param{'body'} .= "<div class=\"day-body\">$daybody{$days[$i]}</div>\n";
    }
    $param{'monthly_list'} = get_monthly_list(%monthbody);

    my $template = readfile("$TEMPLATE_DIR/indexpage.html");
    $template =~ s/\$(\w+)/defined($param{$1})? $param{$1} : ""/ge;
    my $fh = fopen(">index.html");
    print $fh $template;
}

sub get_monthly_list(%) {
    my (%month) = @_;
    my $result = "";
    my $prev_year = 0;
    for my $i (sort keys %month) {
        my ($year, $month) = ($i =~ /^(\d{4})-(\d{2})/);
        if ($year ne $prev_year) { # year changed!
	    $result .= "<br>\n" if $prev_year;
	    $result .= "$year : \n";
            $prev_year = $year;
        }
        $result .= "<a href=\"$i.html\">$MONTHNAME[$month]</a>\n";
    }
    return $result;
}

sub get_datetime($) {
    my ($fname) = @_;
    return split(/\D+/, $fname);
}

sub thumbname($) {
    my ($fname) = @_;
    return "$THUMBS_DIR/$fname";
}

sub htmlname($) {
    my ($fname) = @_;
    $fname =~ s/\.jpg$/\.html/io;
    return "./$fname";
}

sub fopen($) {
    my ($fname) = @_;
    my $fh = new IO::File;
    $fh->open($fname) || die "fopen: $fname: $!";
    return $fh;
}

sub readfile ($) {
    my ($fname) = @_;
    my $fh = fopen($fname);
    my $cont = '';
    my $size = -s $fh;
    read $fh, $cont, $size;
    $fh->close;
    return $cont;
}
